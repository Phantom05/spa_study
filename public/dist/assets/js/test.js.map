{"version":3,"sources":["test.js"],"names":["ev","listener","e","target","type","list","getEv","forEach","f","parentNode","_class","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","_inherits","_wrapNativeSuper","WeakMap","_createClass","key","value","el","event","has","set","Map","channel","get","Set","add","split","document","body","addEventListener","_ref","id","console","log","map","v","querySelector"],"mappings":"kgFAEA,IAAMA,GAAK,WAiBO,SAAVC,EAAUC,GAAG,IACZC,EAAgBD,EAAhBC,OAAQC,EAAQF,EAARE,KACb,EAAE,CACA,IAAMC,EAAOL,EAAGM,MAAMH,EAAQC,GAC9B,GAAGC,EAAK,CACNA,EAAKE,QAAQ,SAAAC,GAAC,OAAEA,EAAE,CAACL,OAAAA,EAAQC,KAAAA,MAC3B,aAEGD,EAASA,EAAOM,YAvBzB,IAAMT,EAAK,IAAA,WACT,SAAAU,IAAa,OAAAC,gBAAAC,KAAAF,GAAAG,2BAAAD,KAAAE,gBAAAJ,GAAAK,KAAAH,OADJ,OAAAI,UAAAN,EAAAO,iBAAmBC,UAAnBC,aAAAT,EAAA,CAAA,CAAAU,IAAA,QAAAC,MAAA,SAEHC,EAAIC,EAAOtB,GACXW,KAAKY,IAAIF,IAAKV,KAAKa,IAAIH,EAAI,IAAII,KACnC,IAAMC,EAAUf,KAAKgB,IAAIN,GAGzB,OAFIK,EAAQH,IAAID,IAAQI,EAAQF,IAAIF,EAAO,IAAIM,KAC/CF,EAAQC,IAAIL,GAAOO,IAAI7B,GAChBW,OAPA,CAAAQ,IAAA,QAAAC,MAAA,SASHC,EAAIC,GACR,GAAIX,KAAKY,IAAIF,IAAQV,KAAKgB,IAAIN,GAAIE,IAAID,GACtC,OAAOX,KAAKgB,IAAIN,GAAIM,IAAIL,OAXjBb,EAAA,IACT,MADS,8CAAAqB,MAAA,KAAAxB,QAAA,SAAAP,GAAA,OAAAgC,SAAAC,KAAAC,iBAAAlC,EAAAC,KACTD,EAHO,GAGgBQ,EAAA,SAAA2B,GAAA,IAAAC,EAAAD,EAAAhC,OAAAiC,GAAA,OAAAC,QAAAC,IAAAF,IAkC3BC,QAAQC,IAnCK,eAAAP,MAAA,KAAAQ,IAAA,SAAAC,GAAA,OAAAR,SAAAS,cAAA,IAAAD","file":"test.js","sourcesContent":["\r\n\r\nconst ev =(_=>{\r\n\r\n  const ev = new (class extends WeakMap{\r\n    constructor(){super();}\r\n    addEv(el, event, listener){\r\n      if(!this.has(el)) this.set(el, new Map);\r\n      const channel = this.get(el);\r\n      if(!channel.has(event)) channel.set(event, new Set);\r\n      channel.get(event).add(listener);\r\n      return this;\r\n    }\r\n    getEv(el, event){\r\n      if(!this.has(el) || !this.get(el).has(event)) return;\r\n      return this.get(el).get(event);\r\n    }\r\n  });\r\n\r\n  const listener =e=>{\r\n    let {target, type} = e;\r\n    do{\r\n      const list = ev.getEv(target, type);\r\n      if(list){\r\n        list.forEach(f=>f({target, type}));\r\n        break;\r\n      }\r\n    }while(target = target.parentNode);\r\n  };\r\n  \r\n\r\n  'click,mousedown,mouseup,touchstart,touchend'.split(',')\r\n.forEach(ev=>document.body.addEventListener(ev, listener));\r\n\r\n  return ev;\r\n})();\r\n \r\n \r\nconst f =({target:{id}})=>console.log(id);\r\nconsole.log(\r\n  'wrapper,self'.split(',').map(v=>document.querySelector('#' + v))\r\n);\r\n\r\n\r\n// //이벤트리스너를 관리하는 구조체\r\n// const ev = new (class extends WeakMap{\r\n//   constructor(){super();}\r\n \r\n//   //리스너추가 - 엘리먼트, 이벤트명, 리스너\r\n//   addEv(el, event, listener){\r\n//     //1. 엘리먼트별 Map생성\r\n//     if(!this.has(el)) this.set(el, new Map);\r\n//     const channel = this.get(el);\r\n \r\n//     //2. 이벤트별 Set생성\r\n//     if(!channel.has(event)) channel.set(event, new Set);\r\n \r\n//     //3. 리스너는 이벤트별 Set에 추가\r\n//     channel.get(event).add(listener);\r\n//     return this;\r\n//   }\r\n \r\n//   //이벤트별 Set얻기\r\n//   getEv(el, event){\r\n//     if(!this.has(el) || !this.get(el).has(event)) return;\r\n//     return this.get(el).get(event);\r\n//   }\r\n// });\r\n\r\n// //통합리스너-버블링으로 검색해가자!\r\n// const listener =e=>{\r\n//   let {target, type} = e;\r\n//   do{\r\n//     //현재 타겟에 리스너가 설정되었다면\r\n//     const list = ev.getEv(target, type);\r\n//     if(list){\r\n//       //돌면서 실행!\r\n//       list.forEach(f=>f({target, type}));\r\n//       break;\r\n//     }\r\n//   //아니라면 부모로 이동\r\n//   }while(target = target.parentNode);\r\n// };\r\n// 'click,mousedown,mouseup,touchstart,touchend'.split(',')\r\n//   .forEach(ev=>document.body.addEventListener(ev, listener));\r\n\r\n//   const f =({target:{id}})=>console.log(id);\r\n \r\n//   //각각 이벤트를 등록한다.\r\n//   'wrapper,self'.split(',').forEach(\r\n//     id=>ev.addEv(document.querySelector('#' + id), 'click', f)\r\n//   );\r\n  \r\n\r\n"],"sourceRoot":"../src"}